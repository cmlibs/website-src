<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classCMLibs_1_1Zinc_1_1Streaminformation" kind="class" language="C++" prot="public">
    <compoundname>CMLibs::Zinc::Streaminformation</compoundname>
    <derivedcompoundref refid="classCMLibs_1_1Zinc_1_1StreaminformationImage" prot="public" virt="non-virtual">CMLibs::Zinc::StreaminformationImage</derivedcompoundref>
    <derivedcompoundref refid="classCMLibs_1_1Zinc_1_1StreaminformationRegion" prot="public" virt="non-virtual">CMLibs::Zinc::StreaminformationRegion</derivedcompoundref>
    <derivedcompoundref refid="classCMLibs_1_1Zinc_1_1StreaminformationScene" prot="public" virt="non-virtual">CMLibs::Zinc::StreaminformationScene</derivedcompoundref>
    <includes refid="stream_8hpp" local="no">stream.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classCMLibs_1_1Zinc_1_1Streaminformation_1a48ee8e95649aa6762a94998e21e258aa" prot="public" static="no" strong="no">
        <type></type>
        <name>DataCompressionType</name>
        <enumvalue id="classCMLibs_1_1Zinc_1_1Streaminformation_1a48ee8e95649aa6762a94998e21e258aaa02d593f275b7d5386245361e3f0a83ff" prot="public">
          <name>DATA_COMPRESSION_TYPE_INVALID</name>
          <initializer>= 	CMZN_STREAMINFORMATION_DATA_COMPRESSION_TYPE_INVALID</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unspecified data compression type </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classCMLibs_1_1Zinc_1_1Streaminformation_1a48ee8e95649aa6762a94998e21e258aaa2757cfd5924259928775b4fb4919ddc3" prot="public">
          <name>DATA_COMPRESSION_TYPE_DEFAULT</name>
          <initializer>= CMZN_STREAMINFORMATION_DATA_COMPRESSION_TYPE_DEFAULT</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>default data compression This is the default compression for streamresource. When compression type for streamresource is set to default, the DATA_COMPRESSION_TYPE set on the owning streaminformation will be used. This type cannot be set for streaminformation. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classCMLibs_1_1Zinc_1_1Streaminformation_1a48ee8e95649aa6762a94998e21e258aaa2f3de29afcde36b8e8cae8bd7fc24b25" prot="public">
          <name>DATA_COMPRESSION_TYPE_NONE</name>
          <initializer>= CMZN_STREAMINFORMATION_DATA_COMPRESSION_TYPE_NONE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No data compression This is the default compression for streaminformation. This specifies the resource(s) to not have any type of compression. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classCMLibs_1_1Zinc_1_1Streaminformation_1a48ee8e95649aa6762a94998e21e258aaae001aaab544252b9ab6e60edf08caae3" prot="public">
          <name>DATA_COMPRESSION_TYPE_GZIP</name>
          <initializer>= CMZN_STREAMINFORMATION_DATA_COMPRESSION_TYPE_GZIP</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Gzip data compression This specifies the resource(s) is compressed using gzip. This mode is supported in all region resource(s) and analyze image format. Analyze image format expects the resource(s) in a gzip compressed tar containing an analyze header file and analyze image file. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classCMLibs_1_1Zinc_1_1Streaminformation_1a48ee8e95649aa6762a94998e21e258aaacecc9b43f09c67a73069cdcc8b360451" prot="public">
          <name>DATA_COMPRESSION_TYPE_BZ2</name>
          <initializer>= CMZN_STREAMINFORMATION_DATA_COMPRESSION_TYPE_BZIP2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bzip2 data compression This specifies the resource(s) is compressed using bzip2. This mode is supported in all region resource(s)and analyze image format. Analyze image format expects the resource(s) in a bzip2 compressed tar containing analyze header file and analyze image file. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Describes data compression scheme used in a stream resource. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/stream.hpp" line="237" column="1" bodyfile="auto_comments_output/stream.hpp" bodystart="236" bodyend="267"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classCMLibs_1_1Zinc_1_1Streaminformation_1a67724ea33aaf0b55e0e4807b3426fe3f" prot="protected" static="no" mutable="no">
        <type>cmzn_streaminformation_id</type>
        <definition>cmzn_streaminformation_id CMLibs::Zinc::Streaminformation::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/stream.hpp" line="218" column="27" bodyfile="auto_comments_output/stream.hpp" bodystart="218" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Streaminformation_1a0a73d80ee4e2d630ab82ab1fbe4b475e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CMLibs::Zinc::Streaminformation::Streaminformation</definition>
        <argsstring>()</argsstring>
        <name>Streaminformation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/stream.hpp" line="222" column="1" bodyfile="auto_comments_output/stream.hpp" bodystart="222" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Streaminformation_1aabc9ad5f8451bc500f03f5bc8edd5ebc" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CMLibs::Zinc::Streaminformation::Streaminformation</definition>
        <argsstring>(cmzn_streaminformation_id in_streaminformation_id)</argsstring>
        <name>Streaminformation</name>
        <param>
          <type>cmzn_streaminformation_id</type>
          <declname>in_streaminformation_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/stream.hpp" line="226" column="10" bodyfile="auto_comments_output/stream.hpp" bodystart="226" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Streaminformation_1ac804a8fe148efb5a102c9f9657c44797" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CMLibs::Zinc::Streaminformation::Streaminformation</definition>
        <argsstring>(const Streaminformation &amp;streamInformation)</argsstring>
        <name>Streaminformation</name>
        <param>
          <type>const <ref refid="classCMLibs_1_1Zinc_1_1Streaminformation" kindref="compound">Streaminformation</ref> &amp;</type>
          <declname>streamInformation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/stream.hpp" line="229" column="1" bodyfile="auto_comments_output/stream.hpp" bodystart="229" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Streaminformation_1aa8f9d159d4d6b1ba9d8435d6ed3627d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCMLibs_1_1Zinc_1_1Streaminformation" kindref="compound">Streaminformation</ref> &amp;</type>
        <definition>Streaminformation&amp; CMLibs::Zinc::Streaminformation::operator=</definition>
        <argsstring>(const Streaminformation &amp;streamInformation)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classCMLibs_1_1Zinc_1_1Streaminformation" kindref="compound">Streaminformation</ref> &amp;</type>
          <declname>streamInformation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/stream.hpp" line="269" column="19" bodyfile="auto_comments_output/stream.hpp" bodystart="269" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Streaminformation_1a8379a9df28c8078a10681962584b8271" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CMLibs::Zinc::Streaminformation::~Streaminformation</definition>
        <argsstring>()</argsstring>
        <name>~Streaminformation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/stream.hpp" line="280" column="1" bodyfile="auto_comments_output/stream.hpp" bodystart="280" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Streaminformation_1a2f778772e17634fa5de5abe2f91ddc05" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CMLibs::Zinc::Streaminformation::isValid</definition>
        <argsstring>() const</argsstring>
        <name>isValid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if this is a valid <ref refid="classCMLibs_1_1Zinc_1_1Streaminformation" kindref="compound">Streaminformation</ref> object.</para>
<para><simplesect kind="return"><para>Status True if object is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/stream.hpp" line="293" column="6" bodyfile="auto_comments_output/stream.hpp" bodystart="293" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Streaminformation_1a18f2dbdae57889318e200edc5e8c26b4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>cmzn_streaminformation_id</type>
        <definition>cmzn_streaminformation_id CMLibs::Zinc::Streaminformation::getId</definition>
        <argsstring>() const</argsstring>
        <name>getId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the C handle of the <ref refid="classCMLibs_1_1Zinc_1_1Streaminformation" kindref="compound">Streaminformation</ref> object.</para>
<para><simplesect kind="return"><para>C handle of <ref refid="classCMLibs_1_1Zinc_1_1Streaminformation" kindref="compound">Streaminformation</ref> if this objects is valid, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/stream.hpp" line="303" column="27" bodyfile="auto_comments_output/stream.hpp" bodystart="303" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Streaminformation_1a33ce88ff504baefbde71fe1078e0ab97" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCMLibs_1_1Zinc_1_1StreamresourceFile" kindref="compound">StreamresourceFile</ref></type>
        <definition>StreamresourceFile CMLibs::Zinc::Streaminformation::createStreamresourceFile</definition>
        <argsstring>(const char *file_name)</argsstring>
        <name>createStreamresourceFile</name>
        <param>
          <type>const char *</type>
          <declname>file_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a stream resource of file type with provided file_name. Corresponding read/write functions with the stream information will attempt to read/write file with the same name.</para>
<para><simplesect kind="see"><para><ref refid="classCMLibs_1_1Zinc_1_1FieldImage_1a6acc6a62e788d7a65101dddcedf25aef" kindref="member">FieldImage::write</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classCMLibs_1_1Zinc_1_1Region_1ad2406f93f1d05e966f5b103ba2e94e7c" kindref="member">Region::write</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classCMLibs_1_1Zinc_1_1FieldImage_1a3d8679279b6e9375ba95a0866b9c230e" kindref="member">FieldImage::read</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classCMLibs_1_1Zinc_1_1Region_1a0c62c7af99966e3e35084156fd195e46" kindref="member">Region::read</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classCMLibs_1_1Zinc_1_1Streamresource_1a894b91758d65465244b7021464a41829" kindref="member">Streamresource::castFile</ref></para>
</simplesect>
stream resource. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file_name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of a file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Handle to new stream resource, or NULL/invalid handle on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/stream.hpp" line="323" column="20" bodyfile="auto_comments_output/stream.hpp" bodystart="323" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Streaminformation_1a470001cec2f57a069ad399fb97c583cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCMLibs_1_1Zinc_1_1StreamresourceMemory" kindref="compound">StreamresourceMemory</ref></type>
        <definition>StreamresourceMemory CMLibs::Zinc::Streaminformation::createStreamresourceMemory</definition>
        <argsstring>()</argsstring>
        <name>createStreamresourceMemory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a stream resource of memory type with no memory buffer, the memory buffer storage in this object is reserved for write or export function calls with the stream information in the future. To input an memory buffer for reading please see cmzn_streaminformation_create_streamresource_memory_buffer.</para>
<para><simplesect kind="see"><para><ref refid="classCMLibs_1_1Zinc_1_1FieldImage_1a6acc6a62e788d7a65101dddcedf25aef" kindref="member">FieldImage::write</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classCMLibs_1_1Zinc_1_1Region_1ad2406f93f1d05e966f5b103ba2e94e7c" kindref="member">Region::write</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classCMLibs_1_1Zinc_1_1FieldImage_1a3d8679279b6e9375ba95a0866b9c230e" kindref="member">FieldImage::read</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classCMLibs_1_1Zinc_1_1Region_1a0c62c7af99966e3e35084156fd195e46" kindref="member">Region::read</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classCMLibs_1_1Zinc_1_1Streamresource_1a3269a8597956e634d8c906c442c68d7c" kindref="member">Streamresource::castMemory</ref></para>
</simplesect>
stream resource. <simplesect kind="return"><para>Handle to new stream resource, or NULL/invalid handle on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/stream.hpp" line="344" column="22" bodyfile="auto_comments_output/stream.hpp" bodystart="344" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Streaminformation_1afd09ff3d22436d0fa6ec48f1d2c6062c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCMLibs_1_1Zinc_1_1StreamresourceMemory" kindref="compound">StreamresourceMemory</ref></type>
        <definition>StreamresourceMemory CMLibs::Zinc::Streaminformation::createStreamresourceMemoryBuffer</definition>
        <argsstring>(const void *buffer, unsigned int buffer_length)</argsstring>
        <name>createStreamresourceMemoryBuffer</name>
        <param>
          <type>const void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>buffer_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a stream resource of memory type for the buffer of the supplied size and at the supplied buffer pointer. The resource can then be read into a <ref refid="namespaceCMLibs_1_1Zinc" kindref="compound">Zinc</ref> object. This function does not copy the buffer, user is responsible for the lifetime of the buffer. Please make sure the buffer is valid when reading the stream information. <simplesect kind="see"><para><ref refid="classCMLibs_1_1Zinc_1_1FieldImage_1a6acc6a62e788d7a65101dddcedf25aef" kindref="member">FieldImage::write</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classCMLibs_1_1Zinc_1_1Region_1ad2406f93f1d05e966f5b103ba2e94e7c" kindref="member">Region::write</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classCMLibs_1_1Zinc_1_1FieldImage_1a3d8679279b6e9375ba95a0866b9c230e" kindref="member">FieldImage::read</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classCMLibs_1_1Zinc_1_1Region_1a0c62c7af99966e3e35084156fd195e46" kindref="member">Region::read</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classCMLibs_1_1Zinc_1_1Streamresource_1a3269a8597956e634d8c906c442c68d7c" kindref="member">Streamresource::castMemory</ref></para>
</simplesect>
stream resource. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the memory buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Handle to new stream resource, or NULL/invalid handle on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/stream.hpp" line="367" column="22" bodyfile="auto_comments_output/stream.hpp" bodystart="367" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Streaminformation_1a81656c2dbc52ac72a4a14959e9e9494d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCMLibs_1_1Zinc_1_1StreamresourceMemory" kindref="compound">StreamresourceMemory</ref></type>
        <definition>StreamresourceMemory CMLibs::Zinc::Streaminformation::createStreamresourceMemoryBufferCopy</definition>
        <argsstring>(const void *buffer, unsigned int buffer_length)</argsstring>
        <name>createStreamresourceMemoryBufferCopy</name>
        <param>
          <type>const void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>buffer_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a stream resource of memory type for the buffer of the supplied size and at the supplied buffer pointer. The resource can then be read into a <ref refid="namespaceCMLibs_1_1Zinc" kindref="compound">Zinc</ref> object. This function copies the buffer.</para>
<para><simplesect kind="see"><para><ref refid="classCMLibs_1_1Zinc_1_1FieldImage_1a6acc6a62e788d7a65101dddcedf25aef" kindref="member">FieldImage::write</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classCMLibs_1_1Zinc_1_1Region_1ad2406f93f1d05e966f5b103ba2e94e7c" kindref="member">Region::write</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classCMLibs_1_1Zinc_1_1FieldImage_1a3d8679279b6e9375ba95a0866b9c230e" kindref="member">FieldImage::read</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classCMLibs_1_1Zinc_1_1Region_1a0c62c7af99966e3e35084156fd195e46" kindref="member">Region::read</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classCMLibs_1_1Zinc_1_1Streamresource_1a3269a8597956e634d8c906c442c68d7c" kindref="member">Streamresource::castMemory</ref></para>
</simplesect>
stream resource. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the memory buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Handle to new stream resource, or NULL/invalid handle on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/stream.hpp" line="390" column="22" bodyfile="auto_comments_output/stream.hpp" bodystart="390" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Streaminformation_1a64c561ae3e5491b320cd8c156da365b2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCMLibs_1_1Zinc_1_1Streaminformation_1a48ee8e95649aa6762a94998e21e258aa" kindref="member">DataCompressionType</ref></type>
        <definition>DataCompressionType CMLibs::Zinc::Streaminformation::getResourceDataCompressionType</definition>
        <argsstring>(const Streamresource &amp;resource) const</argsstring>
        <name>getResourceDataCompressionType</name>
        <param>
          <type>const <ref refid="classCMLibs_1_1Zinc_1_1Streamresource" kindref="compound">Streamresource</ref> &amp;</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the specified data compression for a specified streamresource in streaminformation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>resource</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the stream resource. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>enum for specified data_compression_type for stream resource, CMZN_STREAMINFORMATION_DATA_COMPRESSION_TYPE_INVALID if failed or unset </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/stream.hpp" line="405" column="21" bodyfile="auto_comments_output/stream.hpp" bodystart="405" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Streaminformation_1aff3c317760b8a77f472dfd5b94bb21b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CMLibs::Zinc::Streaminformation::setResourceDataCompressionType</definition>
        <argsstring>(const Streamresource &amp;resource, DataCompressionType dataCompressionType)</argsstring>
        <name>setResourceDataCompressionType</name>
        <param>
          <type>const <ref refid="classCMLibs_1_1Zinc_1_1Streamresource" kindref="compound">Streamresource</ref> &amp;</type>
          <declname>resource</declname>
        </param>
        <param>
          <type><ref refid="classCMLibs_1_1Zinc_1_1Streaminformation_1a48ee8e95649aa6762a94998e21e258aa" kindref="member">DataCompressionType</ref></type>
          <declname>dataCompressionType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specify the data compression of this streamresource and it will override the one specified in the owning streaminformation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>resource</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the stream resource. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataCompressionType</parametername>
</parameternamelist>
<parameterdescription>
<para>enum to indicate the compression used in the resources in the streaminformation</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status <ref refid="namespaceCMLibs_1_1Zinc_1af8a9881f3a06e3e24858b11ddb3f6de9a4f1327b31c1f572158bfee8728e553e8" kindref="member">CMLibs::Zinc::OK</ref> if domain types successfully set, any other value if failed or domain data_compression_type not valid or unable to be set for this cmzn_streaminformation_resource. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/stream.hpp" line="424" column="5" bodyfile="auto_comments_output/stream.hpp" bodystart="424" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Streaminformation_1aa969e89d3801fdad9ed1d2b725d940dd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCMLibs_1_1Zinc_1_1Streaminformation_1a48ee8e95649aa6762a94998e21e258aa" kindref="member">DataCompressionType</ref></type>
        <definition>DataCompressionType CMLibs::Zinc::Streaminformation::getDataCompressionType</definition>
        <argsstring>() const</argsstring>
        <name>getDataCompressionType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the specified data compression for the stream resources in streaminformation.</para>
<para><simplesect kind="return"><para>enum for specified data_compression_type for stream resource, CMZN_STREAMINFORMATION_DATA_COMPRESSION_TYPE_INVALID if failed or unset </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/stream.hpp" line="437" column="21" bodyfile="auto_comments_output/stream.hpp" bodystart="437" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Streaminformation_1a1f8a0fd5b65bfbee1ed1594e670f914a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CMLibs::Zinc::Streaminformation::setDataCompressionType</definition>
        <argsstring>(DataCompressionType dataCompressionType)</argsstring>
        <name>setDataCompressionType</name>
        <param>
          <type><ref refid="classCMLibs_1_1Zinc_1_1Streaminformation_1a48ee8e95649aa6762a94998e21e258aa" kindref="member">DataCompressionType</ref></type>
          <declname>dataCompressionType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specify the data compression of the streamresource in the streaminformation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dataCompressionType</parametername>
</parameternamelist>
<parameterdescription>
<para>enum to indicate the compression used in the resources in the streaminformation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status <ref refid="namespaceCMLibs_1_1Zinc_1af8a9881f3a06e3e24858b11ddb3f6de9a4f1327b31c1f572158bfee8728e553e8" kindref="member">CMLibs::Zinc::OK</ref> if data compression successfully set, any other value if failed or data_compression_type type is not valid or unable to be set for this cmzn_streaminformation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/stream.hpp" line="453" column="5" bodyfile="auto_comments_output/stream.hpp" bodystart="453" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Streaminformation_1ac34bdeb92766895cfdeba63af238c6e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCMLibs_1_1Zinc_1_1StreaminformationImage" kindref="compound">StreaminformationImage</ref></type>
        <definition>StreaminformationImage CMLibs::Zinc::Streaminformation::castImage</definition>
        <argsstring>()</argsstring>
        <name>castImage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If the streaminformation is of image type, then this function returns the derived image stream information handle.</para>
<para><simplesect kind="return"><para>Handle to derived stream information image, or NULL/invalid handle if wrong type or failed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/stream.hpp" line="467" column="31" bodyfile="auto_comments_output/streamimage.hpp" bodystart="213" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Streaminformation_1ada4e8d8e22da2bd0ec7602b795bf6ddb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCMLibs_1_1Zinc_1_1StreaminformationRegion" kindref="compound">StreaminformationRegion</ref></type>
        <definition>StreaminformationRegion CMLibs::Zinc::Streaminformation::castRegion</definition>
        <argsstring>()</argsstring>
        <name>castRegion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If the streaminformation is of region type, then this function returns the region specific handle.</para>
<para><simplesect kind="return"><para>Handle to derived stream information region, or NULL/invalid handle if wrong type or failed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/stream.hpp" line="475" column="32" bodyfile="auto_comments_output/streamregion.hpp" bodystart="375" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Streaminformation_1a5f4ffb13c6f36ac3e015b4921d72b64c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCMLibs_1_1Zinc_1_1StreaminformationScene" kindref="compound">StreaminformationScene</ref></type>
        <definition>StreaminformationScene CMLibs::Zinc::Streaminformation::castScene</definition>
        <argsstring>()</argsstring>
        <name>castScene</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If the streaminformation is of scene type, then this function returns the derived scene stream information handle.</para>
<para><simplesect kind="return"><para>Handle to derived stream information scene, or NULL/invalid handle if wrong type or failed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/stream.hpp" line="483" column="31" bodyfile="auto_comments_output/streamscene.hpp" bodystart="349" bodyend="352"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base type listing resources and options for stream I/O. </para>
    </briefdescription>
    <detaileddescription>
<para>Base stream information type. The stream information maintains, creates and adds details to streamresources for reading from or writing to external resources. Users can create a type-specific stream information for each object with read and write functionality, currently image fields and region. <simplesect kind="see"><para><ref refid="classCMLibs_1_1Zinc_1_1FieldImage_1aedaabbc793ef301578e138f764d9dfcb" kindref="member">FieldImage::createStreaminformationImage</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classCMLibs_1_1Zinc_1_1Region_1a45b3ccc0de972a336a686fddedbb2e1f" kindref="member">Region::createStreaminformationRegion</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>CMLibs::Zinc::StreaminformationImage</label>
        <link refid="classCMLibs_1_1Zinc_1_1StreaminformationImage"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>CMLibs::Zinc::StreaminformationRegion</label>
        <link refid="classCMLibs_1_1Zinc_1_1StreaminformationRegion"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>CMLibs::Zinc::StreaminformationScene</label>
        <link refid="classCMLibs_1_1Zinc_1_1StreaminformationScene"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>CMLibs::Zinc::Streaminformation</label>
        <link refid="classCMLibs_1_1Zinc_1_1Streaminformation"/>
      </node>
    </inheritancegraph>
    <location file="auto_comments_output/stream.hpp" line="215" column="1" bodyfile="auto_comments_output/stream.hpp" bodystart="214" bodyend="485"/>
    <listofallmembers>
      <member refid="classCMLibs_1_1Zinc_1_1Streaminformation_1ac34bdeb92766895cfdeba63af238c6e7" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Streaminformation</scope><name>castImage</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Streaminformation_1ada4e8d8e22da2bd0ec7602b795bf6ddb" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Streaminformation</scope><name>castRegion</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Streaminformation_1a5f4ffb13c6f36ac3e015b4921d72b64c" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Streaminformation</scope><name>castScene</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Streaminformation_1a33ce88ff504baefbde71fe1078e0ab97" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Streaminformation</scope><name>createStreamresourceFile</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Streaminformation_1a470001cec2f57a069ad399fb97c583cb" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Streaminformation</scope><name>createStreamresourceMemory</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Streaminformation_1afd09ff3d22436d0fa6ec48f1d2c6062c" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Streaminformation</scope><name>createStreamresourceMemoryBuffer</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Streaminformation_1a81656c2dbc52ac72a4a14959e9e9494d" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Streaminformation</scope><name>createStreamresourceMemoryBufferCopy</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Streaminformation_1a48ee8e95649aa6762a94998e21e258aaacecc9b43f09c67a73069cdcc8b360451" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Streaminformation</scope><name>DATA_COMPRESSION_TYPE_BZ2</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Streaminformation_1a48ee8e95649aa6762a94998e21e258aaa2757cfd5924259928775b4fb4919ddc3" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Streaminformation</scope><name>DATA_COMPRESSION_TYPE_DEFAULT</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Streaminformation_1a48ee8e95649aa6762a94998e21e258aaae001aaab544252b9ab6e60edf08caae3" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Streaminformation</scope><name>DATA_COMPRESSION_TYPE_GZIP</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Streaminformation_1a48ee8e95649aa6762a94998e21e258aaa02d593f275b7d5386245361e3f0a83ff" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Streaminformation</scope><name>DATA_COMPRESSION_TYPE_INVALID</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Streaminformation_1a48ee8e95649aa6762a94998e21e258aaa2f3de29afcde36b8e8cae8bd7fc24b25" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Streaminformation</scope><name>DATA_COMPRESSION_TYPE_NONE</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Streaminformation_1a48ee8e95649aa6762a94998e21e258aa" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Streaminformation</scope><name>DataCompressionType</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Streaminformation_1aa969e89d3801fdad9ed1d2b725d940dd" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Streaminformation</scope><name>getDataCompressionType</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Streaminformation_1a18f2dbdae57889318e200edc5e8c26b4" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Streaminformation</scope><name>getId</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Streaminformation_1a64c561ae3e5491b320cd8c156da365b2" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Streaminformation</scope><name>getResourceDataCompressionType</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Streaminformation_1a67724ea33aaf0b55e0e4807b3426fe3f" prot="protected" virt="non-virtual"><scope>CMLibs::Zinc::Streaminformation</scope><name>id</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Streaminformation_1a2f778772e17634fa5de5abe2f91ddc05" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Streaminformation</scope><name>isValid</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Streaminformation_1aa8f9d159d4d6b1ba9d8435d6ed3627d5" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Streaminformation</scope><name>operator=</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Streaminformation_1a1f8a0fd5b65bfbee1ed1594e670f914a" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Streaminformation</scope><name>setDataCompressionType</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Streaminformation_1aff3c317760b8a77f472dfd5b94bb21b8" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Streaminformation</scope><name>setResourceDataCompressionType</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Streaminformation_1a0a73d80ee4e2d630ab82ab1fbe4b475e" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Streaminformation</scope><name>Streaminformation</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Streaminformation_1aabc9ad5f8451bc500f03f5bc8edd5ebc" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Streaminformation</scope><name>Streaminformation</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Streaminformation_1ac804a8fe148efb5a102c9f9657c44797" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Streaminformation</scope><name>Streaminformation</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Streaminformation_1a8379a9df28c8078a10681962584b8271" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Streaminformation</scope><name>~Streaminformation</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
