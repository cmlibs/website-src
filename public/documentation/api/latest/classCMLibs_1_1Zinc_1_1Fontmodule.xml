<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classCMLibs_1_1Zinc_1_1Fontmodule" kind="class" language="C++" prot="public">
    <compoundname>CMLibs::Zinc::Fontmodule</compoundname>
    <includes refid="font_8hpp" local="no">font.hpp</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classCMLibs_1_1Zinc_1_1Fontmodule_1a556518625b53dcbc60a6a4ce719c6113" prot="protected" static="no" mutable="no">
        <type>cmzn_fontmodule_id</type>
        <definition>cmzn_fontmodule_id CMLibs::Zinc::Fontmodule::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/font.hpp" line="276" column="20" bodyfile="auto_comments_output/font.hpp" bodystart="276" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Fontmodule_1a3de88155678bff70442b36e526456a40" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CMLibs::Zinc::Fontmodule::Fontmodule</definition>
        <argsstring>()</argsstring>
        <name>Fontmodule</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/font.hpp" line="280" column="1" bodyfile="auto_comments_output/font.hpp" bodystart="280" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Fontmodule_1a38d2c70c309d1ecd6c2fa2a9295f776d" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CMLibs::Zinc::Fontmodule::Fontmodule</definition>
        <argsstring>(cmzn_fontmodule_id in_fontmodule_id)</argsstring>
        <name>Fontmodule</name>
        <param>
          <type>cmzn_fontmodule_id</type>
          <declname>in_fontmodule_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/font.hpp" line="284" column="10" bodyfile="auto_comments_output/font.hpp" bodystart="284" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Fontmodule_1a5a2da2f67096dc4e9065e04dd73ed925" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CMLibs::Zinc::Fontmodule::Fontmodule</definition>
        <argsstring>(const Fontmodule &amp;fontModule)</argsstring>
        <name>Fontmodule</name>
        <param>
          <type>const <ref refid="classCMLibs_1_1Zinc_1_1Fontmodule" kindref="compound">Fontmodule</ref> &amp;</type>
          <declname>fontModule</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/font.hpp" line="288" column="1" bodyfile="auto_comments_output/font.hpp" bodystart="288" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Fontmodule_1ac7b5d932aeb47245c1b6866b2ec75595" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCMLibs_1_1Zinc_1_1Fontmodule" kindref="compound">Fontmodule</ref> &amp;</type>
        <definition>Fontmodule&amp; CMLibs::Zinc::Fontmodule::operator=</definition>
        <argsstring>(const Fontmodule &amp;fontModule)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classCMLibs_1_1Zinc_1_1Fontmodule" kindref="compound">Fontmodule</ref> &amp;</type>
          <declname>fontModule</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/font.hpp" line="292" column="12" bodyfile="auto_comments_output/font.hpp" bodystart="292" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Fontmodule_1a1b3e76e2374c874161b4949370706407" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CMLibs::Zinc::Fontmodule::~Fontmodule</definition>
        <argsstring>()</argsstring>
        <name>~Fontmodule</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/font.hpp" line="304" column="1" bodyfile="auto_comments_output/font.hpp" bodystart="304" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Fontmodule_1ad7bd4cb368a6a14883b4ec80e20c87d3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CMLibs::Zinc::Fontmodule::isValid</definition>
        <argsstring>() const</argsstring>
        <name>isValid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if this is a valid <ref refid="classCMLibs_1_1Zinc_1_1Fontmodule" kindref="compound">Fontmodule</ref> object.</para>
<para><simplesect kind="return"><para>Status True if object is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/font.hpp" line="317" column="6" bodyfile="auto_comments_output/font.hpp" bodystart="317" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Fontmodule_1a2b932691509d6fd4f364eddcde7df99a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>cmzn_fontmodule_id</type>
        <definition>cmzn_fontmodule_id CMLibs::Zinc::Fontmodule::getId</definition>
        <argsstring>() const</argsstring>
        <name>getId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the C handle of the <ref refid="classCMLibs_1_1Zinc_1_1Fontmodule" kindref="compound">Fontmodule</ref> object.</para>
<para><simplesect kind="return"><para>C handle of <ref refid="classCMLibs_1_1Zinc_1_1Fontmodule" kindref="compound">Fontmodule</ref> if this objects is valid, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/font.hpp" line="327" column="20" bodyfile="auto_comments_output/font.hpp" bodystart="327" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Fontmodule_1acbe06aed1e777cd5ae3ecdec0492de40" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCMLibs_1_1Zinc_1_1Font" kindref="compound">Font</ref></type>
        <definition>Font CMLibs::Zinc::Fontmodule::createFont</definition>
        <argsstring>()</argsstring>
        <name>createFont</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create and return a new font.</para>
<para>font will belong to. <simplesect kind="return"><para>Handle to new font, or NULL/invalid handle on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/font.hpp" line="338" column="6" bodyfile="auto_comments_output/font.hpp" bodystart="338" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Fontmodule_1a64ba6074ad5524692987dc12d4f1545b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCMLibs_1_1Zinc_1_1Font" kindref="compound">Font</ref></type>
        <definition>Font CMLibs::Zinc::Fontmodule::findFontByName</definition>
        <argsstring>(const char *name) const</argsstring>
        <name>findFontByName</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the font with the specified name, if any.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the font. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Handle to font, or NULL/invalid handle if not found or failed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/font.hpp" line="349" column="6" bodyfile="auto_comments_output/font.hpp" bodystart="349" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Fontmodule_1afc2297ebaf83fdd83b5ae0d9f61179ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CMLibs::Zinc::Fontmodule::beginChange</definition>
        <argsstring>()</argsstring>
        <name>beginChange</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Begin caching or increment cache level for this font module. Call this function before making multiple changes to minimise number of change messages sent to clients. Must remember to end change after completing changes. Can be nested. <simplesect kind="see"><para><ref refid="classCMLibs_1_1Zinc_1_1Fontmodule_1a5c9feed16ff211449ff31f19eacfa63e" kindref="member">Fontmodule::endChange</ref></para>
</simplesect>
<simplesect kind="return"><para>Status <ref refid="namespaceCMLibs_1_1Zinc_1af8a9881f3a06e3e24858b11ddb3f6de9a4f1327b31c1f572158bfee8728e553e8" kindref="member">CMLibs::Zinc::OK</ref> on success, otherwise <ref refid="namespaceCMLibs_1_1Zinc_1af8a9881f3a06e3e24858b11ddb3f6de9a9213ca4da2588b2f8e939d9645668908" kindref="member">CMLibs::Zinc::ERROR_ARGUMENT</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/font.hpp" line="363" column="5" bodyfile="auto_comments_output/font.hpp" bodystart="363" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Fontmodule_1a5c9feed16ff211449ff31f19eacfa63e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CMLibs::Zinc::Fontmodule::endChange</definition>
        <argsstring>()</argsstring>
        <name>endChange</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decrement cache level or end caching of changes for the font module. Call fontmodule begin change before making multiple changes and call this afterwards. When change level is restored to zero, cached change messages are sent out to clients. <simplesect kind="see"><para><ref refid="classCMLibs_1_1Zinc_1_1Fontmodule_1afc2297ebaf83fdd83b5ae0d9f61179ce" kindref="member">Fontmodule::beginChange</ref></para>
</simplesect>
<simplesect kind="return"><para>Status <ref refid="namespaceCMLibs_1_1Zinc_1af8a9881f3a06e3e24858b11ddb3f6de9a4f1327b31c1f572158bfee8728e553e8" kindref="member">CMLibs::Zinc::OK</ref> on success, any other value on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/font.hpp" line="377" column="5" bodyfile="auto_comments_output/font.hpp" bodystart="377" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Fontmodule_1a48b9d6845228cbc8cf7fdee8e21541dc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCMLibs_1_1Zinc_1_1Font" kindref="compound">Font</ref></type>
        <definition>Font CMLibs::Zinc::Fontmodule::getDefaultFont</definition>
        <argsstring>() const</argsstring>
        <name>getDefaultFont</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the default font, if any.</para>
<para><simplesect kind="return"><para>Handle to font, or NULL/invalid handle if none or failed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/font.hpp" line="387" column="6" bodyfile="auto_comments_output/font.hpp" bodystart="387" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Fontmodule_1a548aedcc207c9f9dca10155e9fc6bff5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CMLibs::Zinc::Fontmodule::setDefaultFont</definition>
        <argsstring>(const Font &amp;font)</argsstring>
        <name>setDefaultFont</name>
        <param>
          <type>const <ref refid="classCMLibs_1_1Zinc_1_1Font" kindref="compound">Font</ref> &amp;</type>
          <declname>font</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the default font.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>font</parametername>
</parameternamelist>
<parameterdescription>
<para>The font to set as default. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="namespaceCMLibs_1_1Zinc_1af8a9881f3a06e3e24858b11ddb3f6de9a4f1327b31c1f572158bfee8728e553e8" kindref="member">CMLibs::Zinc::OK</ref> on success otherwise <ref refid="namespaceCMLibs_1_1Zinc_1af8a9881f3a06e3e24858b11ddb3f6de9a9213ca4da2588b2f8e939d9645668908" kindref="member">CMLibs::Zinc::ERROR_ARGUMENT</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/font.hpp" line="398" column="5" bodyfile="auto_comments_output/font.hpp" bodystart="398" bodyend="401"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Module managing all fonts. </para>
    </briefdescription>
    <detaileddescription>
<para>Module managing all fonts. </para>
    </detaileddescription>
    <location file="auto_comments_output/font.hpp" line="274" column="1" bodyfile="auto_comments_output/font.hpp" bodystart="273" bodyend="402"/>
    <listofallmembers>
      <member refid="classCMLibs_1_1Zinc_1_1Fontmodule_1afc2297ebaf83fdd83b5ae0d9f61179ce" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Fontmodule</scope><name>beginChange</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Fontmodule_1acbe06aed1e777cd5ae3ecdec0492de40" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Fontmodule</scope><name>createFont</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Fontmodule_1a5c9feed16ff211449ff31f19eacfa63e" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Fontmodule</scope><name>endChange</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Fontmodule_1a64ba6074ad5524692987dc12d4f1545b" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Fontmodule</scope><name>findFontByName</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Fontmodule_1a3de88155678bff70442b36e526456a40" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Fontmodule</scope><name>Fontmodule</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Fontmodule_1a38d2c70c309d1ecd6c2fa2a9295f776d" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Fontmodule</scope><name>Fontmodule</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Fontmodule_1a5a2da2f67096dc4e9065e04dd73ed925" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Fontmodule</scope><name>Fontmodule</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Fontmodule_1a48b9d6845228cbc8cf7fdee8e21541dc" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Fontmodule</scope><name>getDefaultFont</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Fontmodule_1a2b932691509d6fd4f364eddcde7df99a" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Fontmodule</scope><name>getId</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Fontmodule_1a556518625b53dcbc60a6a4ce719c6113" prot="protected" virt="non-virtual"><scope>CMLibs::Zinc::Fontmodule</scope><name>id</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Fontmodule_1ad7bd4cb368a6a14883b4ec80e20c87d3" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Fontmodule</scope><name>isValid</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Fontmodule_1ac7b5d932aeb47245c1b6866b2ec75595" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Fontmodule</scope><name>operator=</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Fontmodule_1a548aedcc207c9f9dca10155e9fc6bff5" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Fontmodule</scope><name>setDefaultFont</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Fontmodule_1a1b3e76e2374c874161b4949370706407" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Fontmodule</scope><name>~Fontmodule</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
