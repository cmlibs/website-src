<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classCMLibs_1_1Zinc_1_1Scenefilter" kind="class" language="C++" prot="public">
    <compoundname>CMLibs::Zinc::Scenefilter</compoundname>
    <derivedcompoundref refid="classCMLibs_1_1Zinc_1_1ScenefilterOperator" prot="public" virt="non-virtual">CMLibs::Zinc::ScenefilterOperator</derivedcompoundref>
    <includes refid="scenefilter_8hpp" local="no">scenefilter.hpp</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classCMLibs_1_1Zinc_1_1Scenefilter_1a5bd88515df3c98a1c0eb3bbd8cbdf756" prot="protected" static="no" mutable="no">
        <type>cmzn_scenefilter_id</type>
        <definition>cmzn_scenefilter_id CMLibs::Zinc::Scenefilter::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/scenefilter.hpp" line="36" column="21" bodyfile="auto_comments_output/scenefilter.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Scenefilter_1ad81d5a1a9acaa83f9f2d294997dae2c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CMLibs::Zinc::Scenefilter::Scenefilter</definition>
        <argsstring>()</argsstring>
        <name>Scenefilter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/scenefilter.hpp" line="40" column="1" bodyfile="auto_comments_output/scenefilter.hpp" bodystart="40" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Scenefilter_1a6168805394bf4d216b668984a95e5815" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CMLibs::Zinc::Scenefilter::Scenefilter</definition>
        <argsstring>(cmzn_scenefilter_id in_filter_id)</argsstring>
        <name>Scenefilter</name>
        <param>
          <type>cmzn_scenefilter_id</type>
          <declname>in_filter_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/scenefilter.hpp" line="44" column="10" bodyfile="auto_comments_output/scenefilter.hpp" bodystart="44" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Scenefilter_1a3e25b70786fdb71b09d3abba8a640a69" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CMLibs::Zinc::Scenefilter::Scenefilter</definition>
        <argsstring>(const Scenefilter &amp;scenefilter)</argsstring>
        <name>Scenefilter</name>
        <param>
          <type>const <ref refid="classCMLibs_1_1Zinc_1_1Scenefilter" kindref="compound">Scenefilter</ref> &amp;</type>
          <declname>scenefilter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/scenefilter.hpp" line="48" column="1" bodyfile="auto_comments_output/scenefilter.hpp" bodystart="48" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Scenefilter_1a34336242647cef361ecfd44499541a82" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCMLibs_1_1Zinc_1_1Scenefilter" kindref="compound">Scenefilter</ref> &amp;</type>
        <definition>Scenefilter&amp; CMLibs::Zinc::Scenefilter::operator=</definition>
        <argsstring>(const Scenefilter &amp;scenefilter)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classCMLibs_1_1Zinc_1_1Scenefilter" kindref="compound">Scenefilter</ref> &amp;</type>
          <declname>scenefilter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/scenefilter.hpp" line="52" column="13" bodyfile="auto_comments_output/scenefilter.hpp" bodystart="52" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Scenefilter_1a24c7e2469dc7aac5e6c98304e662a7fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CMLibs::Zinc::Scenefilter::~Scenefilter</definition>
        <argsstring>()</argsstring>
        <name>~Scenefilter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/scenefilter.hpp" line="63" column="1" bodyfile="auto_comments_output/scenefilter.hpp" bodystart="63" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Scenefilter_1a5b4badbc726d973ae877fa2a0b8a4bee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CMLibs::Zinc::Scenefilter::isValid</definition>
        <argsstring>() const</argsstring>
        <name>isValid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if this is a valid <ref refid="classCMLibs_1_1Zinc_1_1Scenefilter" kindref="compound">Scenefilter</ref> object.</para>
<para><simplesect kind="return"><para>Status True if object is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/scenefilter.hpp" line="76" column="6" bodyfile="auto_comments_output/scenefilter.hpp" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Scenefilter_1a1bcfb7de87e7c5fd808a300d7d5d00b0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>cmzn_scenefilter_id</type>
        <definition>cmzn_scenefilter_id CMLibs::Zinc::Scenefilter::getId</definition>
        <argsstring>() const</argsstring>
        <name>getId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the C handle of the <ref refid="classCMLibs_1_1Zinc_1_1Scenefilter" kindref="compound">Scenefilter</ref> object.</para>
<para><simplesect kind="return"><para>C handle of <ref refid="classCMLibs_1_1Zinc_1_1Scenefilter" kindref="compound">Scenefilter</ref> if this objects is valid, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/scenefilter.hpp" line="86" column="21" bodyfile="auto_comments_output/scenefilter.hpp" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Scenefilter_1a159faf13ed02c9612435a026c740d9dd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CMLibs::Zinc::Scenefilter::isManaged</definition>
        <argsstring>() const</argsstring>
        <name>isManaged</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get managed status of scene filter in its owning scene filter module. <simplesect kind="see"><para><ref refid="classCMLibs_1_1Zinc_1_1Scenefilter_1a75189c730a33f9f4290db9ef8c868842" kindref="member">Scenefilter::setManaged</ref></para>
</simplesect>
<simplesect kind="return"><para>true if scene filter is managed, otherwise false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/scenefilter.hpp" line="97" column="6" bodyfile="auto_comments_output/scenefilter.hpp" bodystart="97" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Scenefilter_1a75189c730a33f9f4290db9ef8c868842" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CMLibs::Zinc::Scenefilter::setManaged</definition>
        <argsstring>(bool value)</argsstring>
        <name>setManaged</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set managed status of scene filter in its owning scene filter module. If set (managed) the scene filter will remain indefinitely in the scene filter module even if no external references are held. If not set (unmanaged) the scene filter will be automatically removed from the module when no longer referenced externally, effectively marking it as pending destruction. All new objects are unmanaged unless stated otherwise.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The new value for the managed flag: true or false. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Status <ref refid="namespaceCMLibs_1_1Zinc_1af8a9881f3a06e3e24858b11ddb3f6de9a4f1327b31c1f572158bfee8728e553e8" kindref="member">CMLibs::Zinc::OK</ref> on success, otherwise <ref refid="namespaceCMLibs_1_1Zinc_1af8a9881f3a06e3e24858b11ddb3f6de9a9213ca4da2588b2f8e939d9645668908" kindref="member">CMLibs::Zinc::ERROR_ARGUMENT</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/scenefilter.hpp" line="114" column="5" bodyfile="auto_comments_output/scenefilter.hpp" bodystart="114" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Scenefilter_1a44e6c36f3203e308bde8d9be964f7bda" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CMLibs::Zinc::Scenefilter::evaluateGraphics</definition>
        <argsstring>(const Graphics &amp;graphics)</argsstring>
        <name>evaluateGraphics</name>
        <param>
          <type>const <ref refid="classCMLibs_1_1Zinc_1_1Graphics" kindref="compound">Graphics</ref> &amp;</type>
          <declname>graphics</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Query whether graphics is shown (or processed) with a scene filter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graphics</parametername>
</parameternamelist>
<parameterdescription>
<para>The graphics to query. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Boolean true if this filter shows (includes) this graphics, otherwise false (hides). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/scenefilter.hpp" line="126" column="6" bodyfile="auto_comments_output/scenefilter.hpp" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Scenefilter_1ae83d4819504448f775159138a30244f7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CMLibs::Zinc::Scenefilter::isInverse</definition>
        <argsstring>() const</argsstring>
        <name>isInverse</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get state of inverse flag which if set reverses filter match condition.</para>
<para><simplesect kind="return"><para>true if scene filter matches inverse, otherwise false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/scenefilter.hpp" line="136" column="6" bodyfile="auto_comments_output/scenefilter.hpp" bodystart="136" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Scenefilter_1a0d48e6a57d5ba1a3b5dd81f8b0daeaa1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CMLibs::Zinc::Scenefilter::setInverse</definition>
        <argsstring>(bool value)</argsstring>
        <name>setInverse</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set state of inverse flag which if set reverses filter match condition. Default is false i.e. normal condition.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean true to set inverse, false for non-inverse. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Status <ref refid="namespaceCMLibs_1_1Zinc_1af8a9881f3a06e3e24858b11ddb3f6de9a4f1327b31c1f572158bfee8728e553e8" kindref="member">CMLibs::Zinc::OK</ref> on success, otherwise <ref refid="namespaceCMLibs_1_1Zinc_1af8a9881f3a06e3e24858b11ddb3f6de9a9213ca4da2588b2f8e939d9645668908" kindref="member">CMLibs::Zinc::ERROR_ARGUMENT</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/scenefilter.hpp" line="148" column="5" bodyfile="auto_comments_output/scenefilter.hpp" bodystart="148" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Scenefilter_1a35cf2165a1ae063600319b64463254bd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>char *</type>
        <definition>char* CMLibs::Zinc::Scenefilter::getName</definition>
        <argsstring>() const</argsstring>
        <name>getName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return an allocated string containing scene filter name.</para>
<para><simplesect kind="return"><para>allocated string containing scene filter name, or NULL on failure. Up to caller to free using cmzn_deallocate(). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/scenefilter.hpp" line="159" column="6" bodyfile="auto_comments_output/scenefilter.hpp" bodystart="159" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Scenefilter_1a71fd2b7bad8b6cde541277e6530c0009" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CMLibs::Zinc::Scenefilter::setName</definition>
        <argsstring>(const char *name)</argsstring>
        <name>setName</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set name of the scene filter. Must be unique in the scene filter module.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name to be set to the scene filter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Status <ref refid="namespaceCMLibs_1_1Zinc_1af8a9881f3a06e3e24858b11ddb3f6de9a4f1327b31c1f572158bfee8728e553e8" kindref="member">CMLibs::Zinc::OK</ref> on success, any other value on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/scenefilter.hpp" line="170" column="5" bodyfile="auto_comments_output/scenefilter.hpp" bodystart="170" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Scenefilter_1a7611cdabfbb98b161cab3b74f9877452" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCMLibs_1_1Zinc_1_1ScenefilterOperator" kindref="compound">ScenefilterOperator</ref></type>
        <definition>ScenefilterOperator CMLibs::Zinc::Scenefilter::castOperator</definition>
        <argsstring>()</argsstring>
        <name>castOperator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If the filter is of operator and or or type, then this function returns the operator derived scenefilter handle.</para>
<para><simplesect kind="return"><para>Handle to derived scene filter operator, or NULL/invalid handle if wrong type or failed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/scenefilter.hpp" line="182" column="28" bodyfile="auto_comments_output/scenefilter.hpp" bodystart="303" bodyend="306"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classCMLibs_1_1Zinc_1_1Scene" kindref="compound">Scene</ref> filters determines which graphics are drawn. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classCMLibs_1_1Zinc_1_1Scene" kindref="compound">Scene</ref> filters are Boolean functions determining which graphics are drawn on a sceneviewer, or processed by a scenepicker or other tool. Derived types implement operators including filtering by scene and graphics visibility flags, region/scene, graphics name, graphics type, field domain type, and logical and/or operators allowing expressions combining filters. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>CMLibs::Zinc::Scenefilter</label>
        <link refid="classCMLibs_1_1Zinc_1_1Scenefilter"/>
      </node>
      <node id="2">
        <label>CMLibs::Zinc::ScenefilterOperator</label>
        <link refid="classCMLibs_1_1Zinc_1_1ScenefilterOperator"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="auto_comments_output/scenefilter.hpp" line="34" column="1" bodyfile="auto_comments_output/scenefilter.hpp" bodystart="33" bodyend="183"/>
    <listofallmembers>
      <member refid="classCMLibs_1_1Zinc_1_1Scenefilter_1a7611cdabfbb98b161cab3b74f9877452" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Scenefilter</scope><name>castOperator</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Scenefilter_1a44e6c36f3203e308bde8d9be964f7bda" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Scenefilter</scope><name>evaluateGraphics</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Scenefilter_1a1bcfb7de87e7c5fd808a300d7d5d00b0" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Scenefilter</scope><name>getId</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Scenefilter_1a35cf2165a1ae063600319b64463254bd" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Scenefilter</scope><name>getName</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Scenefilter_1a5bd88515df3c98a1c0eb3bbd8cbdf756" prot="protected" virt="non-virtual"><scope>CMLibs::Zinc::Scenefilter</scope><name>id</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Scenefilter_1ae83d4819504448f775159138a30244f7" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Scenefilter</scope><name>isInverse</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Scenefilter_1a159faf13ed02c9612435a026c740d9dd" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Scenefilter</scope><name>isManaged</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Scenefilter_1a5b4badbc726d973ae877fa2a0b8a4bee" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Scenefilter</scope><name>isValid</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Scenefilter_1a34336242647cef361ecfd44499541a82" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Scenefilter</scope><name>operator=</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Scenefilter_1ad81d5a1a9acaa83f9f2d294997dae2c1" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Scenefilter</scope><name>Scenefilter</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Scenefilter_1a6168805394bf4d216b668984a95e5815" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Scenefilter</scope><name>Scenefilter</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Scenefilter_1a3e25b70786fdb71b09d3abba8a640a69" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Scenefilter</scope><name>Scenefilter</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Scenefilter_1a0d48e6a57d5ba1a3b5dd81f8b0daeaa1" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Scenefilter</scope><name>setInverse</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Scenefilter_1a75189c730a33f9f4290db9ef8c868842" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Scenefilter</scope><name>setManaged</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Scenefilter_1a71fd2b7bad8b6cde541277e6530c0009" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Scenefilter</scope><name>setName</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Scenefilter_1a24c7e2469dc7aac5e6c98304e662a7fe" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Scenefilter</scope><name>~Scenefilter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
