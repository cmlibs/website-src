<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classCMLibs_1_1Zinc_1_1Lightmodule" kind="class" language="C++" prot="public">
    <compoundname>CMLibs::Zinc::Lightmodule</compoundname>
    <includes refid="light_8hpp" local="no">light.hpp</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classCMLibs_1_1Zinc_1_1Lightmodule_1af5e2d843a906b0192b335251e82c19b2" prot="protected" static="no" mutable="no">
        <type>cmzn_lightmodule_id</type>
        <definition>cmzn_lightmodule_id CMLibs::Zinc::Lightmodule::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/light.hpp" line="487" column="21" bodyfile="auto_comments_output/light.hpp" bodystart="487" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Lightmodule_1ad95528e21c8718f939fd20dc95f8fd04" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CMLibs::Zinc::Lightmodule::Lightmodule</definition>
        <argsstring>()</argsstring>
        <name>Lightmodule</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/light.hpp" line="491" column="1" bodyfile="auto_comments_output/light.hpp" bodystart="491" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Lightmodule_1a63ac1f7c80dcfb057357d431e25a8053" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CMLibs::Zinc::Lightmodule::Lightmodule</definition>
        <argsstring>(cmzn_lightmodule_id in_lightmodule_id)</argsstring>
        <name>Lightmodule</name>
        <param>
          <type>cmzn_lightmodule_id</type>
          <declname>in_lightmodule_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/light.hpp" line="495" column="10" bodyfile="auto_comments_output/light.hpp" bodystart="495" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Lightmodule_1acbb619beb160a6a4a681e54cd8cb2320" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CMLibs::Zinc::Lightmodule::Lightmodule</definition>
        <argsstring>(const Lightmodule &amp;lightModule)</argsstring>
        <name>Lightmodule</name>
        <param>
          <type>const <ref refid="classCMLibs_1_1Zinc_1_1Lightmodule" kindref="compound">Lightmodule</ref> &amp;</type>
          <declname>lightModule</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/light.hpp" line="499" column="1" bodyfile="auto_comments_output/light.hpp" bodystart="499" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Lightmodule_1ad3f137ae831d6aaf0baa3991b78ee78d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCMLibs_1_1Zinc_1_1Lightmodule" kindref="compound">Lightmodule</ref> &amp;</type>
        <definition>Lightmodule&amp; CMLibs::Zinc::Lightmodule::operator=</definition>
        <argsstring>(const Lightmodule &amp;lightModule)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classCMLibs_1_1Zinc_1_1Lightmodule" kindref="compound">Lightmodule</ref> &amp;</type>
          <declname>lightModule</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/light.hpp" line="503" column="13" bodyfile="auto_comments_output/light.hpp" bodystart="503" bodyend="513"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Lightmodule_1a6e04457c8aeaa99b53026100a5bccd25" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CMLibs::Zinc::Lightmodule::~Lightmodule</definition>
        <argsstring>()</argsstring>
        <name>~Lightmodule</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/light.hpp" line="515" column="1" bodyfile="auto_comments_output/light.hpp" bodystart="515" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Lightmodule_1a87edcf6456c6877b750b485b99debe36" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CMLibs::Zinc::Lightmodule::isValid</definition>
        <argsstring>() const</argsstring>
        <name>isValid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if this is a valid <ref refid="classCMLibs_1_1Zinc_1_1Lightmodule" kindref="compound">Lightmodule</ref> object.</para>
<para><simplesect kind="return"><para>Status True if object is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/light.hpp" line="528" column="6" bodyfile="auto_comments_output/light.hpp" bodystart="528" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Lightmodule_1ab8530656c5a3621fe1d91a113abcf799" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>cmzn_lightmodule_id</type>
        <definition>cmzn_lightmodule_id CMLibs::Zinc::Lightmodule::getId</definition>
        <argsstring>() const</argsstring>
        <name>getId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the C handle of the <ref refid="classCMLibs_1_1Zinc_1_1Lightmodule" kindref="compound">Lightmodule</ref> object.</para>
<para><simplesect kind="return"><para>C handle of <ref refid="classCMLibs_1_1Zinc_1_1Lightmodule" kindref="compound">Lightmodule</ref> if this objects is valid, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/light.hpp" line="538" column="21" bodyfile="auto_comments_output/light.hpp" bodystart="538" bodyend="541"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Lightmodule_1a947441cfdc63dadd5808e866a4f74f60" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCMLibs_1_1Zinc_1_1Light" kindref="compound">Light</ref></type>
        <definition>Light CMLibs::Zinc::Lightmodule::createLight</definition>
        <argsstring>()</argsstring>
        <name>createLight</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new light, initialised with default settings. Following creation, the caller is expected to set the type and settings such as colour, direction and/or position as appropriate for the type.</para>
<para><simplesect kind="return"><para>Handle to new light, or NULL/invalid handle on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/light.hpp" line="550" column="7" bodyfile="auto_comments_output/light.hpp" bodystart="550" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Lightmodule_1ac9b0a216441b597a41f079266b082895" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCMLibs_1_1Zinc_1_1Lightiterator" kindref="compound">Lightiterator</ref></type>
        <definition>Lightiterator CMLibs::Zinc::Lightmodule::createLightiterator</definition>
        <argsstring>()</argsstring>
        <name>createLightiterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a light iterator object for iterating through the lights in the light module, in alphabetical order of name. The iterator initially points at the position before the first light, so the first call to the iterator next() method returns the first light and advances the iterator. The iterator becomes invalid if lights are added, removed or renamed while in use. <simplesect kind="see"><para><ref refid="classCMLibs_1_1Zinc_1_1Lightiterator_1ac4330843844ebd519bcea185c1c45a43" kindref="member">Lightiterator::next</ref></para>
</simplesect>
lights are to be iterated over. <simplesect kind="return"><para>Handle to light iterator, or NULL/invalid handle on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/light.hpp" line="567" column="15" bodyfile="auto_comments_output/light.hpp" bodystart="567" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Lightmodule_1ac0ebae89728486abf1c16a0daa40a8da" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCMLibs_1_1Zinc_1_1Light" kindref="compound">Light</ref></type>
        <definition>Light CMLibs::Zinc::Lightmodule::findLightByName</definition>
        <argsstring>(const char *name) const</argsstring>
        <name>findLightByName</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the light with the specified name, if any.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the light. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Handle to light, or NULL/invalid handle if not found or failed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/light.hpp" line="578" column="7" bodyfile="auto_comments_output/light.hpp" bodystart="578" bodyend="581"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Lightmodule_1acf6aac75137bf33d112e38c1d7de1887" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CMLibs::Zinc::Lightmodule::beginChange</definition>
        <argsstring>()</argsstring>
        <name>beginChange</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Begin caching or increment cache level for this light module. Call this function before making multiple changes to minimise number of change messages sent to clients. Must remember to end_change after completing changes. Can be nested. <simplesect kind="see"><para><ref refid="classCMLibs_1_1Zinc_1_1Lightmodule_1a4ddb7b647f0ed1603752826f518bf30e" kindref="member">Lightmodule::endChange</ref></para>
</simplesect>
<simplesect kind="return"><para>Status <ref refid="namespaceCMLibs_1_1Zinc_1af8a9881f3a06e3e24858b11ddb3f6de9a4f1327b31c1f572158bfee8728e553e8" kindref="member">CMLibs::Zinc::OK</ref> on success, otherwise <ref refid="namespaceCMLibs_1_1Zinc_1af8a9881f3a06e3e24858b11ddb3f6de9a9213ca4da2588b2f8e939d9645668908" kindref="member">CMLibs::Zinc::ERROR_ARGUMENT</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/light.hpp" line="592" column="5" bodyfile="auto_comments_output/light.hpp" bodystart="592" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Lightmodule_1a4ddb7b647f0ed1603752826f518bf30e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CMLibs::Zinc::Lightmodule::endChange</definition>
        <argsstring>()</argsstring>
        <name>endChange</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decrement cache level or end caching of changes for the light module. Call light module begin change method before making multiple changes and call this afterwards. When change level is restored to zero, cached change messages are sent out to clients. <simplesect kind="see"><para><ref refid="classCMLibs_1_1Zinc_1_1Lightmodule_1acf6aac75137bf33d112e38c1d7de1887" kindref="member">Lightmodule::beginChange</ref></para>
</simplesect>
<simplesect kind="return"><para>Status <ref refid="namespaceCMLibs_1_1Zinc_1af8a9881f3a06e3e24858b11ddb3f6de9a4f1327b31c1f572158bfee8728e553e8" kindref="member">CMLibs::Zinc::OK</ref> on success, any other value on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/light.hpp" line="606" column="5" bodyfile="auto_comments_output/light.hpp" bodystart="606" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Lightmodule_1aa3ceb544b28c77242bf5c4b2bdcbb51b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCMLibs_1_1Zinc_1_1Light" kindref="compound">Light</ref></type>
        <definition>Light CMLibs::Zinc::Lightmodule::getDefaultLight</definition>
        <argsstring>() const</argsstring>
        <name>getDefaultLight</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the default light to be used in sceneviewer. If there is none, a default directional light is automatically created with RGB value of [0.8, 0.8, 0.8] and [0.0, -0.5, -1.0] for its direction i.e. into the screen and slightly down. Note that the colour of this light and the default ambient light sum to 1.0 to ensure colours of graphics are not oversaturated with default settings.</para>
<para><simplesect kind="return"><para>Handle to default light, or NULL/invalid handle if none or failed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/light.hpp" line="621" column="7" bodyfile="auto_comments_output/light.hpp" bodystart="621" bodyend="624"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Lightmodule_1aec94604658f4b571a11ffc7674596ad8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CMLibs::Zinc::Lightmodule::setDefaultLight</definition>
        <argsstring>(const Light &amp;light)</argsstring>
        <name>setDefaultLight</name>
        <param>
          <type>const <ref refid="classCMLibs_1_1Zinc_1_1Light" kindref="compound">Light</ref> &amp;</type>
          <declname>light</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the default light, this default light will be used by any sceneviewer created afterward. Typically this is expected to be a directional light; not expected to be of ambient type.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>light</parametername>
</parameternamelist>
<parameterdescription>
<para>The light to set as the default light. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="namespaceCMLibs_1_1Zinc_1af8a9881f3a06e3e24858b11ddb3f6de9a4f1327b31c1f572158bfee8728e553e8" kindref="member">CMLibs::Zinc::OK</ref> on success otherwise <ref refid="namespaceCMLibs_1_1Zinc_1af8a9881f3a06e3e24858b11ddb3f6de9a9213ca4da2588b2f8e939d9645668908" kindref="member">CMLibs::Zinc::ERROR_ARGUMENT</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/light.hpp" line="634" column="5" bodyfile="auto_comments_output/light.hpp" bodystart="634" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Lightmodule_1ace965810663ae86f7c6010de4d15d81f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCMLibs_1_1Zinc_1_1Light" kindref="compound">Light</ref></type>
        <definition>Light CMLibs::Zinc::Lightmodule::getDefaultAmbientLight</definition>
        <argsstring>() const</argsstring>
        <name>getDefaultAmbientLight</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the default ambient light to be used in new scene viewers. If none, one is automatically created with RGB colour value of [0.2, 0.2, 0.2]. Note that the colour of this light and the default light sum to 1.0 to ensure colours of graphics are not oversaturated with default settings.</para>
<para><simplesect kind="return"><para>Handle to default ambient light, or NULL/invalid handle if none or failed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/light.hpp" line="648" column="7" bodyfile="auto_comments_output/light.hpp" bodystart="648" bodyend="651"/>
      </memberdef>
      <memberdef kind="function" id="classCMLibs_1_1Zinc_1_1Lightmodule_1ab27c12f6805bbe9838a4999c6dab1136" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CMLibs::Zinc::Lightmodule::setDefaultAmbientLight</definition>
        <argsstring>(const Light &amp;light)</argsstring>
        <name>setDefaultAmbientLight</name>
        <param>
          <type>const <ref refid="classCMLibs_1_1Zinc_1_1Light" kindref="compound">Light</ref> &amp;</type>
          <declname>light</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the default ambient light, this default ambient light will be used by any scene viewers created afterward.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>light</parametername>
</parameternamelist>
<parameterdescription>
<para>The light to set as default ambient light. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="namespaceCMLibs_1_1Zinc_1af8a9881f3a06e3e24858b11ddb3f6de9a4f1327b31c1f572158bfee8728e553e8" kindref="member">CMLibs::Zinc::OK</ref> on success otherwise <ref refid="namespaceCMLibs_1_1Zinc_1af8a9881f3a06e3e24858b11ddb3f6de9a9213ca4da2588b2f8e939d9645668908" kindref="member">CMLibs::Zinc::ERROR_ARGUMENT</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="auto_comments_output/light.hpp" line="660" column="5" bodyfile="auto_comments_output/light.hpp" bodystart="660" bodyend="663"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Module managing all light objects. </para>
    </briefdescription>
    <detaileddescription>
<para>Module managing all light objects. It maintains separate default lights for directional head-lights and for ambient lights (background lighting from all directions), which are automatically added to new scene viewers. </para>
    </detaileddescription>
    <location file="auto_comments_output/light.hpp" line="485" column="1" bodyfile="auto_comments_output/light.hpp" bodystart="484" bodyend="664"/>
    <listofallmembers>
      <member refid="classCMLibs_1_1Zinc_1_1Lightmodule_1acf6aac75137bf33d112e38c1d7de1887" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Lightmodule</scope><name>beginChange</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Lightmodule_1a947441cfdc63dadd5808e866a4f74f60" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Lightmodule</scope><name>createLight</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Lightmodule_1ac9b0a216441b597a41f079266b082895" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Lightmodule</scope><name>createLightiterator</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Lightmodule_1a4ddb7b647f0ed1603752826f518bf30e" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Lightmodule</scope><name>endChange</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Lightmodule_1ac0ebae89728486abf1c16a0daa40a8da" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Lightmodule</scope><name>findLightByName</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Lightmodule_1ace965810663ae86f7c6010de4d15d81f" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Lightmodule</scope><name>getDefaultAmbientLight</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Lightmodule_1aa3ceb544b28c77242bf5c4b2bdcbb51b" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Lightmodule</scope><name>getDefaultLight</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Lightmodule_1ab8530656c5a3621fe1d91a113abcf799" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Lightmodule</scope><name>getId</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Lightmodule_1af5e2d843a906b0192b335251e82c19b2" prot="protected" virt="non-virtual"><scope>CMLibs::Zinc::Lightmodule</scope><name>id</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Lightmodule_1a87edcf6456c6877b750b485b99debe36" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Lightmodule</scope><name>isValid</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Lightmodule_1ad95528e21c8718f939fd20dc95f8fd04" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Lightmodule</scope><name>Lightmodule</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Lightmodule_1a63ac1f7c80dcfb057357d431e25a8053" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Lightmodule</scope><name>Lightmodule</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Lightmodule_1acbb619beb160a6a4a681e54cd8cb2320" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Lightmodule</scope><name>Lightmodule</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Lightmodule_1ad3f137ae831d6aaf0baa3991b78ee78d" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Lightmodule</scope><name>operator=</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Lightmodule_1ab27c12f6805bbe9838a4999c6dab1136" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Lightmodule</scope><name>setDefaultAmbientLight</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Lightmodule_1aec94604658f4b571a11ffc7674596ad8" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Lightmodule</scope><name>setDefaultLight</name></member>
      <member refid="classCMLibs_1_1Zinc_1_1Lightmodule_1a6e04457c8aeaa99b53026100a5bccd25" prot="public" virt="non-virtual"><scope>CMLibs::Zinc::Lightmodule</scope><name>~Lightmodule</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
